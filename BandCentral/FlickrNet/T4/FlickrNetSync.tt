<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ include file="T4Helpers.tt" #>
<#@ output extension=".cs" #>
<#

var doc = XDocument.Load(this.Host.ResolvePath("FlickrApi.xml"));

var methods = doc.Descendants("method");

#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using FlickrNet;

namespace FlickrNet
{

	// ReSharper disable UseObjectOrCollectionInitializer

	public partial class Flickr
	{
<#
	foreach(var method in methods)
	{
		var methodName = ParseName(method.Attribute("name").Value);
		var retAttribute = method.Attribute("return");
		var retType = retAttribute == null ? "void" : retAttribute.Value;

		string realReturnType;
		switch(retType)
        {
			case "xpathnodes":
				realReturnType = method.Attribute("xpathtype").Value + "[]";
				break;
			case "xpathnode":
				realReturnType = method.Attribute("xpathtype").Value;
				break;
			default:
				realReturnType = retType;
				break;
        }

		var arguments = ParseArguments(method);
 
#>

		#region <#= method.Attribute("name").Value #>

		public <#= realReturnType #> <#= methodName #>(<#= arguments #>) 
		{
			var dictionary = new Dictionary<string, string>();
			dictionary.Add("method", "<#= method.Attribute("name").Value #>");
<#
		foreach(var arg in method.Descendants("argument"))
        {
			var argName = arg.Attribute("name").Value;
			var argType = arg.Attribute("type").Value;
			var argVariable = ParseArg(argName);
			var argConvert = ParseConverter(argType, argVariable);
			
			if( argType == "PartialSearchOptions" )
			{
				WriteLine("\t\t\tUtilityMethods.PartialOptionsIntoArray({0}, dictionary);", argVariable);
				continue;
			}
			if( argType == "PhotoSearchOptions" )
            {
				WriteLine("\t\t\t{0}.AddToDictionary(dictionary);", argVariable);
				continue;
			}
			var isNullable = arg.Attributes().Any(a => a.Name == "nullable" && a.Value == "true");
			if( arg.Attribute("default") != null && (arg.Attribute("alwayssend") == null || arg.Attribute("alwayssend").Value == "false") )
			{
				var def = isNullable ? "null" : arg.Attribute("default").Value;
				WriteLine("\t\t\tif ({0} != {1}) dictionary.Add(\"{2}\", {3});", argVariable, def, argName, argConvert);
			}
			else
			{
				WriteLine("\t\t\tdictionary.Add(\"{0}\", {1});", argName, argConvert);
			}

        }

		switch(retType){
			case "void":
				WriteLine("\t\t\t{0}(dictionary);", "GetResponse<NoResponse>");
				break;
			case "string":
				WriteLine("\t\t\t{0}(dictionary);", "var result = GetResponse<StringHolder>");
				WriteLine("\t\t\treturn result.Value;");
				break;
			case "xpathnodes":
				WriteLine("\t\t\tvar result = GetResponse<UnknownResponse>(dictionary);", "var result = GetResponse<StringHolder>");
				WriteLine("\t\t\treturn result.GetElementArray<{2}>(\"{0}\", \"{1}\");", method.Attribute("xpathelement").Value, method.Attribute("xpathattribute").Value, method.Attribute("xpathtype").Value);
				break;
			case "xpathnode":
				WriteLine("\t\t\tvar result = GetResponse<UnknownResponse>(dictionary);", "var result = GetResponse<StringHolder>");
				WriteLine("\t\t\treturn result.GetAttributeValue<{2}>(\"{0}\", \"{1}\");", method.Attribute("xpathelement").Value, method.Attribute("xpathattribute").Value, method.Attribute("xpathtype").Value);
				break;
			default:
				WriteLine("\t\t\t{0}(dictionary);", "return GetResponse<" + retType + ">");
				break;
		} 

		//var response = retType == "void" ? "GetResponse<NoResponse>" : "return GetResponse<" + realReturnType + ">";

		//WriteLine("\t\t\t{0}(dictionary);", response);

#>		}
<#	
		// Overloads
		foreach(var overload in method.Descendants("overload"))
        {
			List<string> parameters = overload.Attribute("parameters").Value.Split(',').ToList();
			var overloadParameters = ParseArguments(method, parameters);
#>

		public <#= retType #> <#= methodName #>(<#= overloadParameters #>) 
		{
<#
			var overloadArgs = new List<string>();
			foreach(var arg in method.Descendants("argument"))
			{
				var argName = arg.Attribute("name").Value;
				var argType = arg.Attribute("type").Value;

				if( parameters.Contains(argName) )
                {
					overloadArgs.Add(ParseArg(argName));
                }
				else
				{
					overloadArgs.Add(arg.Attribute("default").Value);
                }
			}
			WriteLine("\t\t\t{0}{1}({2});", retType != "void" ? "return " : "", methodName, string.Join(", ", overloadArgs.ToArray()));
#>		}

<#
        }

		WriteLine("\t\t#endregion");
	
	}	



#>
	}

}
